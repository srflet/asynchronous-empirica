var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module, copyDefault, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
};

// node_modules/.pnpm/tsup@5.11.11_typescript@4.5.5/node_modules/tsup/assets/esm_shims.js
var init_esm_shims = __esm({
  "node_modules/.pnpm/tsup@5.11.11_typescript@4.5.5/node_modules/tsup/assets/esm_shims.js"() {
  }
});

// node_modules/.pnpm/picocolors@1.0.0/node_modules/picocolors/picocolors.js
var require_picocolors = __commonJS({
  "node_modules/.pnpm/picocolors@1.0.0/node_modules/picocolors/picocolors.js"(exports, module) {
    init_esm_shims();
    var tty = __require("tty");
    var isColorSupported = !("NO_COLOR" in process.env || process.argv.includes("--no-color")) && ("FORCE_COLOR" in process.env || process.argv.includes("--color") || process.platform === "win32" || tty.isatty(1) && process.env.TERM !== "dumb" || "CI" in process.env);
    var formatter = (open, close, replace = open) => (input) => {
      let string = "" + input;
      let index = string.indexOf(close, open.length);
      return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
    };
    var replaceClose = (string, close, replace, index) => {
      let start = string.substring(0, index) + replace;
      let end = string.substring(index + close.length);
      let nextIndex = end.indexOf(close);
      return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;
    };
    var createColors = (enabled = isColorSupported) => ({
      isColorSupported: enabled,
      reset: enabled ? (s) => `[0m${s}[0m` : String,
      bold: enabled ? formatter("[1m", "[22m", "[22m[1m") : String,
      dim: enabled ? formatter("[2m", "[22m", "[22m[2m") : String,
      italic: enabled ? formatter("[3m", "[23m") : String,
      underline: enabled ? formatter("[4m", "[24m") : String,
      inverse: enabled ? formatter("[7m", "[27m") : String,
      hidden: enabled ? formatter("[8m", "[28m") : String,
      strikethrough: enabled ? formatter("[9m", "[29m") : String,
      black: enabled ? formatter("[30m", "[39m") : String,
      red: enabled ? formatter("[31m", "[39m") : String,
      green: enabled ? formatter("[32m", "[39m") : String,
      yellow: enabled ? formatter("[33m", "[39m") : String,
      blue: enabled ? formatter("[34m", "[39m") : String,
      magenta: enabled ? formatter("[35m", "[39m") : String,
      cyan: enabled ? formatter("[36m", "[39m") : String,
      white: enabled ? formatter("[37m", "[39m") : String,
      gray: enabled ? formatter("[90m", "[39m") : String,
      bgBlack: enabled ? formatter("[40m", "[49m") : String,
      bgRed: enabled ? formatter("[41m", "[49m") : String,
      bgGreen: enabled ? formatter("[42m", "[49m") : String,
      bgYellow: enabled ? formatter("[43m", "[49m") : String,
      bgBlue: enabled ? formatter("[44m", "[49m") : String,
      bgMagenta: enabled ? formatter("[45m", "[49m") : String,
      bgCyan: enabled ? formatter("[46m", "[49m") : String,
      bgWhite: enabled ? formatter("[47m", "[49m") : String
    });
    module.exports = createColors();
    module.exports.createColors = createColors;
  }
});

// src/index.ts
init_esm_shims();
var import_picocolors = __toESM(require_picocolors());
import fs from "fs";
import path from "path";
import micromatch from "micromatch";
function touch(path2) {
  const time = new Date();
  try {
    fs.utimesSync(path2, time, time);
  } catch (err) {
    fs.closeSync(fs.openSync(path2, "w"));
  }
}
var i = 0;
function toArray(arr) {
  if (!arr)
    return [];
  if (Array.isArray(arr))
    return arr;
  return [arr];
}
function VitePluginRestart(options = {}) {
  const {
    delay = 500,
    glob: enableGlob = true
  } = options;
  let root = process.cwd();
  let reloadGlobs = [];
  let restartGlobs = [];
  let configFile = "vite.config.js";
  let timerState = "reload";
  let timer;
  const pathPlatform = process.platform === "win32" ? path.win32 : path.posix;
  function clear() {
    clearTimeout(timer);
  }
  function schedule(fn) {
    clear();
    timer = setTimeout(fn, delay);
  }
  return {
    name: `vite-plugin-restart:${i++}`,
    apply: "serve",
    config(c2) {
      if (!enableGlob)
        return;
      if (!c2.server)
        c2.server = {};
      if (!c2.server.watch)
        c2.server.watch = {};
      c2.server.watch.disableGlobbing = false;
    },
    configResolved(config) {
      if (fs.existsSync("vite.config.ts"))
        configFile = "vite.config.ts";
      root = config.root;
      restartGlobs = toArray(options.restart).map((i2) => path.posix.join(root, i2));
      reloadGlobs = toArray(options.reload).map((i2) => path.posix.join(root, i2));
    },
    configureServer(server) {
      server.watcher.add([
        ...restartGlobs,
        ...reloadGlobs
      ]);
      server.watcher.on("add", handleFileChange);
      server.watcher.on("change", handleFileChange);
      server.watcher.on("unlink", handleFileChange);
      function handleFileChange(file) {
        if (micromatch.isMatch(file, restartGlobs)) {
          timerState = "restart";
          schedule(() => {
            touch(configFile);
            console.log(import_picocolors.default.dim(new Date().toLocaleTimeString()) + import_picocolors.default.bold(import_picocolors.default.blue(" [plugin-restart] ")) + import_picocolors.default.yellow(`restarting server by ${pathPlatform.relative(root, file)}`));
            timerState = "";
          });
        } else if (micromatch.isMatch(file, reloadGlobs) && timerState !== "restart") {
          timerState = "reload";
          schedule(() => {
            server.ws.send({ type: "full-reload" });
            timerState = "";
          });
        }
      }
    }
  };
}
var src_default = VitePluginRestart;
export {
  src_default as default
};
